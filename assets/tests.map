{"version":3,"sources":["lonewolf201/tests/android/controller.jshint.js","lonewolf201/tests/app.jshint.js","lonewolf201/tests/application/controller.jshint.js","lonewolf201/tests/application/route.jshint.js","lonewolf201/tests/components/comming-soon/component.jshint.js","lonewolf201/tests/components/ellipsis-component/component.jshint.js","lonewolf201/tests/components/nav-bar/component.jshint.js","lonewolf201/tests/components/story-board/component.jshint.js","lonewolf201/tests/contact-info/controller.jshint.js","lonewolf201/tests/ctf/controller.jshint.js","lonewolf201/tests/helpers/destroy-app.js","lonewolf201/tests/helpers/destroy-app.jshint.js","lonewolf201/tests/helpers/lycan-logic.jshint.js","lonewolf201/tests/helpers/module-for-acceptance.js","lonewolf201/tests/helpers/module-for-acceptance.jshint.js","lonewolf201/tests/helpers/resolver.js","lonewolf201/tests/helpers/resolver.jshint.js","lonewolf201/tests/helpers/start-app.js","lonewolf201/tests/helpers/start-app.jshint.js","lonewolf201/tests/home/android/controller.jshint.js","lonewolf201/tests/home/android/route.jshint.js","lonewolf201/tests/home/contact-info/controller.jshint.js","lonewolf201/tests/home/contact-info/route.jshint.js","lonewolf201/tests/home/controller.jshint.js","lonewolf201/tests/home/ctf/controller.jshint.js","lonewolf201/tests/home/ctf/route.jshint.js","lonewolf201/tests/home/ios-tweaks/controller.jshint.js","lonewolf201/tests/home/ios-tweaks/route.jshint.js","lonewolf201/tests/home/javascript/controller.jshint.js","lonewolf201/tests/home/javascript/route.jshint.js","lonewolf201/tests/home/route.jshint.js","lonewolf201/tests/home/timeline/controller.jshint.js","lonewolf201/tests/home/timeline/route.jshint.js","lonewolf201/tests/integration/components/comming-soon/component-test.js","lonewolf201/tests/integration/components/comming-soon/component-test.jshint.js","lonewolf201/tests/integration/components/ellipsis-component/component-test.js","lonewolf201/tests/integration/components/ellipsis-component/component-test.jshint.js","lonewolf201/tests/integration/components/nav-bar/component-test.js","lonewolf201/tests/integration/components/nav-bar/component-test.jshint.js","lonewolf201/tests/integration/components/story-board/component-test.js","lonewolf201/tests/integration/components/story-board/component-test.jshint.js","lonewolf201/tests/ios-tweaks/controller.jshint.js","lonewolf201/tests/ios-tweaks/route.jshint.js","lonewolf201/tests/javascript/controller.jshint.js","lonewolf201/tests/router.jshint.js","lonewolf201/tests/services/lycan-service.jshint.js","lonewolf201/tests/test-helper.js","lonewolf201/tests/test-helper.jshint.js","lonewolf201/tests/unit/android/controller-test.js","lonewolf201/tests/unit/android/controller-test.jshint.js","lonewolf201/tests/unit/application/controller-test.js","lonewolf201/tests/unit/application/controller-test.jshint.js","lonewolf201/tests/unit/application/route-test.js","lonewolf201/tests/unit/application/route-test.jshint.js","lonewolf201/tests/unit/contact-info/controller-test.js","lonewolf201/tests/unit/contact-info/controller-test.jshint.js","lonewolf201/tests/unit/ctf/controller-test.js","lonewolf201/tests/unit/ctf/controller-test.jshint.js","lonewolf201/tests/unit/helpers/lycan-logic-test.js","lonewolf201/tests/unit/helpers/lycan-logic-test.jshint.js","lonewolf201/tests/unit/home/android/controller-test.js","lonewolf201/tests/unit/home/android/controller-test.jshint.js","lonewolf201/tests/unit/home/android/route-test.js","lonewolf201/tests/unit/home/android/route-test.jshint.js","lonewolf201/tests/unit/home/contact-info/controller-test.js","lonewolf201/tests/unit/home/contact-info/controller-test.jshint.js","lonewolf201/tests/unit/home/contact-info/route-test.js","lonewolf201/tests/unit/home/contact-info/route-test.jshint.js","lonewolf201/tests/unit/home/controller-test.js","lonewolf201/tests/unit/home/controller-test.jshint.js","lonewolf201/tests/unit/home/ctf/controller-test.js","lonewolf201/tests/unit/home/ctf/controller-test.jshint.js","lonewolf201/tests/unit/home/ctf/route-test.js","lonewolf201/tests/unit/home/ctf/route-test.jshint.js","lonewolf201/tests/unit/home/ios-tweaks/controller-test.js","lonewolf201/tests/unit/home/ios-tweaks/controller-test.jshint.js","lonewolf201/tests/unit/home/ios-tweaks/route-test.js","lonewolf201/tests/unit/home/ios-tweaks/route-test.jshint.js","lonewolf201/tests/unit/home/javascript/controller-test.js","lonewolf201/tests/unit/home/javascript/controller-test.jshint.js","lonewolf201/tests/unit/home/javascript/route-test.js","lonewolf201/tests/unit/home/javascript/route-test.jshint.js","lonewolf201/tests/unit/home/route-test.js","lonewolf201/tests/unit/home/route-test.jshint.js","lonewolf201/tests/unit/home/timeline/controller-test.js","lonewolf201/tests/unit/home/timeline/controller-test.jshint.js","lonewolf201/tests/unit/home/timeline/route-test.js","lonewolf201/tests/unit/home/timeline/route-test.jshint.js","lonewolf201/tests/unit/ios-tweaks/controller-test.js","lonewolf201/tests/unit/ios-tweaks/controller-test.jshint.js","lonewolf201/tests/unit/ios-tweaks/route-test.js","lonewolf201/tests/unit/ios-tweaks/route-test.jshint.js","lonewolf201/tests/unit/javascript/controller-test.js","lonewolf201/tests/unit/javascript/controller-test.jshint.js","lonewolf201/tests/unit/services/lycan-service-test.js","lonewolf201/tests/unit/services/lycan-service-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('lonewolf201/tests/android/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - android/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'android/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/application/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/components/comming-soon/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/comming-soon/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/comming-soon/component.js should pass jshint.\\ncomponents/comming-soon/component.js: line 22, col 34, \\'anim\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('lonewolf201/tests/components/ellipsis-component/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/ellipsis-component/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ellipsis-component/component.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/components/nav-bar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/nav-bar/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/nav-bar/component.js should pass jshint.\\ncomponents/nav-bar/component.js: line 33, col 11, Missing semicolon.\\ncomponents/nav-bar/component.js: line 38, col 49, Missing semicolon.\\ncomponents/nav-bar/component.js: line 79, col 9, Comma warnings can be turned off with \\'laxcomma\\'.\\ncomponents/nav-bar/component.js: line 78, col 9, Misleading line break before \\',\\'; readers may interpret this as an expression boundary.\\n\\n4 errors');\n  });\n});","define('lonewolf201/tests/components/story-board/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/story-board/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/story-board/component.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/contact-info/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - contact-info/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'contact-info/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/ctf/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - ctf/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ctf/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('lonewolf201/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/helpers/lycan-logic.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/lycan-logic.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/lycan-logic.js should pass jshint.\\nhelpers/lycan-logic.js: line 5, col 23, Expected \\'===\\' and instead saw \\'==\\'.\\n\\n1 error');\n  });\n});","define('lonewolf201/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'lonewolf201/tests/helpers/start-app', 'lonewolf201/tests/helpers/destroy-app'], function (exports, _qunit, _lonewolf201TestsHelpersStartApp, _lonewolf201TestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _lonewolf201TestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _lonewolf201TestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('lonewolf201/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/helpers/resolver', ['exports', 'ember/resolver', 'lonewolf201/config/environment'], function (exports, _emberResolver, _lonewolf201ConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _lonewolf201ConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _lonewolf201ConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('lonewolf201/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/helpers/start-app', ['exports', 'ember', 'lonewolf201/app', 'lonewolf201/config/environment'], function (exports, _ember, _lonewolf201App, _lonewolf201ConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _lonewolf201ConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _lonewolf201App['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('lonewolf201/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/android/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/android/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/android/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/android/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/android/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/android/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/contact-info/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/contact-info/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/contact-info/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/contact-info/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/contact-info/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/contact-info/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/ctf/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/ctf/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/ctf/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/ctf/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/ctf/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/ctf/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/ios-tweaks/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/ios-tweaks/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/ios-tweaks/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/ios-tweaks/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/ios-tweaks/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/ios-tweaks/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/javascript/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/javascript/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/javascript/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/javascript/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/javascript/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/javascript/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/timeline/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/timeline/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/timeline/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/home/timeline/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - home/timeline/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/timeline/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/integration/components/comming-soon/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('comming-soon', 'Integration | Component | comming soon', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'comming-soon', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.12',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'comming-soon', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lonewolf201/tests/integration/components/comming-soon/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/comming-soon/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/comming-soon/component-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/integration/components/ellipsis-component/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ellipsis-component', 'Integration | Component | ellipsis component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'ellipsis-component', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.12',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'ellipsis-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lonewolf201/tests/integration/components/ellipsis-component/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/ellipsis-component/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ellipsis-component/component-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/integration/components/nav-bar/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'nav-bar', ['loc', [null, [1, 0], [1, 11]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.12',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'nav-bar', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lonewolf201/tests/integration/components/nav-bar/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/nav-bar/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar/component-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/integration/components/story-board/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('story-board', 'Integration | Component | story board', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'story-board', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.12',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.12',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'story-board', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lonewolf201/tests/integration/components/story-board/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/story-board/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/story-board/component-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/ios-tweaks/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - ios-tweaks/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ios-tweaks/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/ios-tweaks/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - ios-tweaks/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ios-tweaks/route.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/javascript/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - javascript/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'javascript/controller.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/services/lycan-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/lycan-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/lycan-service.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/test-helper', ['exports', 'lonewolf201/tests/helpers/resolver', 'ember-qunit'], function (exports, _lonewolf201TestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_lonewolf201TestsHelpersResolver['default']);\n});","define('lonewolf201/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/android/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:android', 'Unit | Controller | android', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/android/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/android/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/android/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/application/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/application/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/application/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/contact-info/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:contact-info', 'Unit | Controller | contact info', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/contact-info/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/contact-info/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/contact-info/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/ctf/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:ctf', 'Unit | Controller | ctf', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/ctf/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/ctf/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/ctf/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/helpers/lycan-logic-test', ['exports', 'lonewolf201/helpers/lycan-logic', 'qunit'], function (exports, _lonewolf201HelpersLycanLogic, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | lycan logic');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _lonewolf201HelpersLycanLogic.lycanLogic)(42);\n    assert.ok(result);\n  });\n});","define('lonewolf201/tests/unit/helpers/lycan-logic-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/lycan-logic-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/lycan-logic-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/android/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/android', 'Unit | Controller | home/android', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/android/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/android/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/android/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/android/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/android', 'Unit | Route | home/android', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/android/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/android/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/android/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/contact-info/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/contact-info', 'Unit | Controller | home/contact info', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/contact-info/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/contact-info/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/contact-info/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/contact-info/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/contact-info', 'Unit | Route | home/contact info', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/contact-info/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/contact-info/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/contact-info/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home', 'Unit | Controller | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/ctf/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/ctf', 'Unit | Controller | home/ctf', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/ctf/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/ctf/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/ctf/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/ctf/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/ctf', 'Unit | Route | home/ctf', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/ctf/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/ctf/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/ctf/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/ios-tweaks/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/ios-tweaks', 'Unit | Controller | home/ios tweaks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/ios-tweaks/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/ios-tweaks/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/ios-tweaks/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/ios-tweaks/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/ios-tweaks', 'Unit | Route | home/ios tweaks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/ios-tweaks/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/ios-tweaks/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/ios-tweaks/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/javascript/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/javascript', 'Unit | Controller | home/javascript', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/javascript/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/javascript/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/javascript/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/javascript/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/javascript', 'Unit | Route | home/javascript', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/javascript/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/javascript/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/javascript/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/timeline/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home/timeline', 'Unit | Controller | home/timeline', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/home/timeline/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/timeline/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/timeline/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/home/timeline/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home/timeline', 'Unit | Route | home/timeline', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/home/timeline/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/home/timeline/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/timeline/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/ios-tweaks/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:ios-tweaks', 'Unit | Controller | ios tweaks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/ios-tweaks/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/ios-tweaks/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/ios-tweaks/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/ios-tweaks/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ios-tweaks', 'Unit | Route | ios tweaks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lonewolf201/tests/unit/ios-tweaks/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/ios-tweaks/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/ios-tweaks/route-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/javascript/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:javascript', 'Unit | Controller | javascript', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('lonewolf201/tests/unit/javascript/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/javascript/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/javascript/controller-test.js should pass jshint.');\n  });\n});","define('lonewolf201/tests/unit/services/lycan-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:lycan-service', 'Unit | Service | lycan service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('lonewolf201/tests/unit/services/lycan-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/lycan-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/lycan-service-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('lonewolf201/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}